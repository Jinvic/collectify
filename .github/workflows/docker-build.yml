name: Build And Upload Image

on:
  push:
    branches:
      - 'cicd'
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Custom image tag (e.g. test, latest, v1.2.3)'
        required: false
        default: 'test'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Determine Docker Image Tags
        id: set-tags
        run: |
          DOCKER_USER_NAME="${{ secrets.DOCKER_USER_NAME }}"
          IMAGE_TAG=""
          ADD_LATEST="false"

          # 1. 手动触发输入
          if [ -n "${{ github.event.inputs.image_tag }}" ]; then
            IMAGE_TAG="${{ github.event.inputs.image_tag }}"
            echo "Using manual input tag: $IMAGE_TAG"
          # 2. git tag 推送
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            IMAGE_TAG=$(echo "${{ github.ref }}" \| sed 's|refs/tags/||')
            ADD_LATEST="true"
            echo "Git tag detected: $IMAGE_TAG, will also tag as latest"
          # 3. cicd 分支
          elif [ "${{ github.ref }}" == "refs/heads/cicd" ]; then
            IMAGE_TAG="test"
            echo "Push from cicd branch"
          else
            IMAGE_TAG="unknown"
            echo "Unknown trigger"
          fi

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

          TAGS="${DOCKER_USER_NAME}/collectify:$IMAGE_TAG"
          if [ "$ADD_LATEST" = "true" ]; then
            TAGS="$TAGS,${DOCKER_USER_NAME}/collectify:latest"
          fi

          echo "tags<<EOF" >> $GITHUB_OUTPUT
          echo "$TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "🎯 Final image tag: $IMAGE_TAG"
          echo "📦 Docker tags to push:"
          echo -e "$TAGS"

      - name: Build and Push Image
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          platforms: |
            linux/amd64
            linux/arm64
          tags: ${{ steps.set-tags.outputs.tags }}